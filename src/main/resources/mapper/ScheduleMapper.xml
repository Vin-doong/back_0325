<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.suppleit.backend.mapper.ScheduleMapper">

    <!-- 날짜 및 Enum 타입 핸들링을 위한 resultMap -->
    <resultMap id="scheduleResultMap" type="com.suppleit.backend.model.Schedule">
        <id property="scheduleId" column="schedule_id"/>
        <result property="intakeStart" column="intake_start" jdbcType="DATE"/>
        <result property="intakeDistance" column="intake_distance" jdbcType="INTEGER"/>
        <result property="intakeEnd" column="intake_end" jdbcType="DATE"/>
        <result property="intakeTime" column="intake_time" jdbcType="VARCHAR"/>
        <result property="memo" column="memo" jdbcType="VARCHAR"/>
        <result property="memberId" column="member_id" jdbcType="BIGINT"/>
        <result property="prdId" column="prd_id" jdbcType="BIGINT"/>
    </resultMap>

    <!-- 스케줄 등록 -->
    <insert id="insertSchedule" useGeneratedKeys="true" keyProperty="scheduleId">
        INSERT INTO Schedule (
            intake_start, 
            intake_distance, 
            intake_end, 
            intake_time, 
            memo, 
            member_id, 
            prd_id
        ) VALUES (
            #{intakeStart, jdbcType=DATE}, 
            #{intakeDistance, jdbcType=INTEGER}, 
            #{intakeEnd, jdbcType=DATE}, 
            #{intakeTime, jdbcType=VARCHAR}, 
            #{memo, jdbcType=VARCHAR}, 
            #{memberId, jdbcType=BIGINT}, 
            #{prdId, jdbcType=BIGINT}
        )
    </insert>

    <!-- 특정 회원의 모든 스케줄 조회 -->
    <select id="getSchedulesByMemberId" resultMap="scheduleResultMap">
        SELECT s.*, p.product_name
        FROM Schedule s
        LEFT JOIN Product p ON s.prd_id = p.prd_id
        WHERE s.member_id = #{memberId}
        ORDER BY s.intake_start DESC
    </select>

    <!-- 일별 스케줄 조회 -->
    <select id="getDailySchedules" resultMap="scheduleResultMap">
        SELECT s.*, p.product_name
        FROM Schedule s
        LEFT JOIN Product p ON s.prd_id = p.prd_id
        WHERE s.member_id = #{memberId}
          AND #{date} BETWEEN s.intake_start AND COALESCE(s.intake_end, '9999-12-31')
        ORDER BY 
            CASE s.intake_time 
                WHEN '아침' THEN 1
                WHEN '점심' THEN 2
                WHEN '저녁' THEN 3
                ELSE 4
            END
    </select>

    <!-- 주간 스케줄 조회 -->
    <select id="getWeeklySchedules" resultMap="scheduleResultMap">
        SELECT s.*, p.product_name
        FROM Schedule s
        LEFT JOIN Product p ON s.prd_id = p.prd_id
        WHERE s.member_id = #{memberId}
          AND (
            (s.intake_start BETWEEN #{startDate} AND #{endDate}) OR
            (s.intake_end BETWEEN #{startDate} AND #{endDate}) OR
            (s.intake_start &lt;= #{startDate} AND (s.intake_end >= #{endDate} OR s.intake_end IS NULL))
          )
        ORDER BY s.intake_start, 
            CASE s.intake_time 
                WHEN '아침' THEN 1
                WHEN '점심' THEN 2
                WHEN '저녁' THEN 3
                ELSE 4
            END
    </select>

    <!-- 스케줄 상세 조회 -->
    <select id="getScheduleById" resultMap="scheduleResultMap">
        SELECT s.*, p.product_name
        FROM Schedule s
        LEFT JOIN Product p ON s.prd_id = p.prd_id
        WHERE s.schedule_id = #{scheduleId}
    </select>

    <!-- 스케줄 수정 -->
    <update id="updateSchedule">
        UPDATE Schedule
        SET 
            intake_start = #{intakeStart, jdbcType=DATE},
            intake_distance = #{intakeDistance, jdbcType=INTEGER},
            intake_end = #{intakeEnd, jdbcType=DATE},
            intake_time = #{intakeTime, jdbcType=VARCHAR},
            memo = #{memo, jdbcType=VARCHAR},
            prd_id = #{prdId, jdbcType=BIGINT}
        WHERE schedule_id = #{scheduleId}
    </update>

    <!-- 스케줄 삭제 -->
    <delete id="deleteSchedule">
        DELETE FROM Schedule 
        WHERE schedule_id = #{scheduleId}
    </delete>

</mapper>